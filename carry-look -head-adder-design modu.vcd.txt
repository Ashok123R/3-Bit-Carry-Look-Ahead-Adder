// carry look ahead adder design module

module CLA_Adder (a,b,cin, sum, cout);
	input [2:0] a,b; 
	input cin;
	output [2:0] sum;
        output cout;
	wire p0,p1,p2,p3,g0,g1,g2,g3,c0,c1,c2, C3, C4;

assign p0 = (a[0] ^ b[0]) , //Propogation term 
	p1=(a[1]^b[1]), 
      p2 = (a[2]^b[2])

assign g0=(a[0]&b[0]), //Generation term
	g1 = (a[1]&b[1]), 
	g2= (a[2]&b[2]) ;

assign c0 = cin , //Carry
      c1=g0 | (p0&cin)
      c2=g1| (p1&g0)|p0@p1&cin
      c3=g2| (p2&g1) | (p2&p1&g0) |(p2&p1&p0&cin);

assign sum[0]=p0^c0,
	sum[1]=p1^c1, 
	sum[2]=p2^c2;

assign cout=c3;

endmodule
